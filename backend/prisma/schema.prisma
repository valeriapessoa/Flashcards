generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  name          String?        @db.VarChar(100)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  flashcards    Flashcard[]
  studySessions StudySession[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  text String @unique
  flashcards Flashcard[] @relation("FlashcardTags")
}

model Flashcard {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  imageUrl     String?
  backImageUrl String?      // imagem do verso
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyResults StudyResult[]
  categories   Category[]    @relation("FlashcardCategories")
  tags         Tag[]         @relation("FlashcardTags")
  errorCount   Int           @default(0) // Campo para contar erros
  reviewed     Boolean       @default(false) // Campo para indicar se o flashcard foi revisado
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(100)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  flashcards Flashcard[] @relation("FlashcardCategories")
}

model StudySession {
  id           Int           @id @default(autoincrement())
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  studyResults StudyResult[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudyResult {
  id             Int          @id @default(autoincrement())
  flashcardId    Int
  studySessionId Int
  correct        Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
}
